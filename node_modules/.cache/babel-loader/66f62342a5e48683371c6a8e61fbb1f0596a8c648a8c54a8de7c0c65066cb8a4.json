{"ast":null,"code":"var _jsxFileName = \"D:\\\\Study Mats\\\\React\\\\01-starting-setup\\\\01-starting-setup\\\\src\\\\components\\\\Expenses\\\\Expenses.js\",\n  _s = $RefreshSig$();\nimport ExpenseItem from \"./ExpenseItem\";\nimport Card from \"../UI/Card\";\nimport \"./Expenses.css\";\nimport ExpensesFilter from \"./ExpenseFilter\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Expenses(props) {\n  _s();\n  const [filteredYear, setFilteredYear] = useState(\"2020\");\n  const filterChangeHandler = selectedYear => {\n    console.log(\"Expenses.js\");\n    setFilteredYear(selectedYear);\n  };\n  const filteredExpenses = props.expenseItems.filter(expenseYear => {\n    return expenseYear.date.getFullYear().toString() === filteredYear;\n  });\n  let expensesContent = /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"No expenses found\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 25\n  }, this);\n  if (filteredExpenses.length > 0) {\n    expensesContent = filteredExpenses.map(expense => /*#__PURE__*/_jsxDEV(ExpenseItem, {\n      title: expense.title,\n      amount: expense.amount,\n      date: expense.date\n    }, expense.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this));\n  } //<- Using if condition to show the value if there's a content for a year else show no expenses found \n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      className: \"expenses\",\n      children: [/*#__PURE__*/_jsxDEV(ExpensesFilter, {\n        selected: filteredYear,\n        onChangeFilter: filterChangeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), expensesContent]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n_s(Expenses, \"N/aF5O1Q1Yumn7zBaSWVzvWGO2A=\");\n_c = Expenses;\nexport default Expenses;\nvar _c;\n$RefreshReg$(_c, \"Expenses\");","map":{"version":3,"names":["ExpenseItem","Card","ExpensesFilter","useState","jsxDEV","_jsxDEV","Expenses","props","_s","filteredYear","setFilteredYear","filterChangeHandler","selectedYear","console","log","filteredExpenses","expenseItems","filter","expenseYear","date","getFullYear","toString","expensesContent","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","expense","title","amount","id","className","selected","onChangeFilter","_c","$RefreshReg$"],"sources":["D:/Study Mats/React/01-starting-setup/01-starting-setup/src/components/Expenses/Expenses.js"],"sourcesContent":["import ExpenseItem from \"./ExpenseItem\";\r\nimport Card from \"../UI/Card\";\r\nimport \"./Expenses.css\";\r\nimport ExpensesFilter from \"./ExpenseFilter\";\r\nimport { useState } from \"react\";\r\n\r\nfunction Expenses(props) {\r\n  const [filteredYear, setFilteredYear] = useState(\"2020\");\r\n  const filterChangeHandler = (selectedYear) => {\r\n    console.log(\"Expenses.js\");\r\n    setFilteredYear(selectedYear);\r\n  };\r\n  const filteredExpenses = props.expenseItems.filter((expenseYear) => {\r\n    return expenseYear.date.getFullYear().toString() === filteredYear;\r\n  });\r\n\r\n  let expensesContent = <p>No expenses found</p>;\r\n  if (filteredExpenses.length > 0) {\r\n    expensesContent = filteredExpenses.map((expense) => (\r\n      <ExpenseItem\r\n        key={expense.id}\r\n        title={expense.title}\r\n        amount={expense.amount}\r\n        date={expense.date}\r\n      />\r\n    ));\r\n  }//<- Using if condition to show the value if there's a content for a year else show no expenses found \r\n\r\n  return (\r\n    <div>\r\n      <Card className=\"expenses\">\r\n        <ExpensesFilter\r\n          selected={filteredYear}\r\n          onChangeFilter={filterChangeHandler}\r\n        />\r\n\r\n        {/*Dynamically taking the item values using map() || \"{}\" used for dynamically rendering*/}\r\n        {/* {filteredExpenses.length === 0 ? (\r\n          <p>No expenses found</p>\r\n        ) : (\r\n          filteredExpenses.map((expense) => (\r\n            <ExpenseItem\r\n              key={expense.id}\r\n              title={expense.title}\r\n              amount={expense.amount}\r\n              date={expense.date}\r\n            />\r\n          ))\r\n        )} */}{/**<- Using ternary operation to show the value if there's a content for a year else show no expenses found */}\r\n        {/* {filteredExpenses.length === 0 &&  <p>No expenses found</p>}\r\n        {filteredExpenses.length > 0 && filteredExpenses.map((expense) => (\r\n            <ExpenseItem\r\n              key={expense.id}\r\n              title={expense.title}\r\n              amount={expense.amount}\r\n              date={expense.date}\r\n            />\r\n          ))\r\n        } */}{/**<- Using && operator to show the value if there's a content for a year else show no expenses found */}\r\n        {expensesContent}{/**<-Calling the data content dynamically here by rendering the variable*/}\r\n\r\n        {/*Hard Coded Expressions to render */}\r\n        {/* <ExpenseItem\r\n          title={props.expenseItems[0].title}\r\n          amount={props.expenseItems[0].amount}\r\n          date={props.expenseItems[0].date}\r\n        />\r\n        <ExpenseItem\r\n          title={props.expenseItems[1].title}\r\n          amount={props.expenseItems[1].amount}\r\n          date={props.expenseItems[1].date}\r\n        />\r\n        <ExpenseItem\r\n          title={props.expenseItems[2].title}\r\n          amount={props.expenseItems[2].amount}\r\n          date={props.expenseItems[2].date}\r\n        />\r\n        <ExpenseItem\r\n          title={props.expenseItems[3].title}\r\n          amount={props.expenseItems[3].amount}\r\n          date={props.expenseItems[3].date}\r\n        /> */}\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\nexport default Expenses;\r\n"],"mappings":";;AAAA,OAAOA,WAAW,MAAM,eAAe;AACvC,OAAOC,IAAI,MAAM,YAAY;AAC7B,OAAO,gBAAgB;AACvB,OAAOC,cAAc,MAAM,iBAAiB;AAC5C,SAASC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,SAASC,QAAQA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACvB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGP,QAAQ,CAAC,MAAM,CAAC;EACxD,MAAMQ,mBAAmB,GAAIC,YAAY,IAAK;IAC5CC,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;IAC1BJ,eAAe,CAACE,YAAY,CAAC;EAC/B,CAAC;EACD,MAAMG,gBAAgB,GAAGR,KAAK,CAACS,YAAY,CAACC,MAAM,CAAEC,WAAW,IAAK;IAClE,OAAOA,WAAW,CAACC,IAAI,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,KAAKZ,YAAY;EACnE,CAAC,CAAC;EAEF,IAAIa,eAAe,gBAAGjB,OAAA;IAAAkB,QAAA,EAAG;EAAiB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC;EAC9C,IAAIZ,gBAAgB,CAACa,MAAM,GAAG,CAAC,EAAE;IAC/BN,eAAe,GAAGP,gBAAgB,CAACc,GAAG,CAAEC,OAAO,iBAC7CzB,OAAA,CAACL,WAAW;MAEV+B,KAAK,EAAED,OAAO,CAACC,KAAM;MACrBC,MAAM,EAAEF,OAAO,CAACE,MAAO;MACvBb,IAAI,EAAEW,OAAO,CAACX;IAAK,GAHdW,OAAO,CAACG,EAAE;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAIhB,CACF,CAAC;EACJ,CAAC;;EAED,oBACEtB,OAAA;IAAAkB,QAAA,eACElB,OAAA,CAACJ,IAAI;MAACiC,SAAS,EAAC,UAAU;MAAAX,QAAA,gBACxBlB,OAAA,CAACH,cAAc;QACbiC,QAAQ,EAAE1B,YAAa;QACvB2B,cAAc,EAAEzB;MAAoB;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrC,CAAC,EAyBDL,eAAe;IAAA;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAuBZ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV;AAACnB,EAAA,CA/EQF,QAAQ;AAAA+B,EAAA,GAAR/B,QAAQ;AAgFjB,eAAeA,QAAQ;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}